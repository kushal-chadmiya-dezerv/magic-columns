"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@hookstate";
exports.ids = ["vendor-chunks/@hookstate"];
exports.modules = {

/***/ "(ssr)/./node_modules/@hookstate/core/dist/index.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/@hookstate/core/dist/index.es.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateFragment: () => (/* binding */ StateFragment),\n/* harmony export */   __state: () => (/* binding */ __state),\n/* harmony export */   configure: () => (/* binding */ configure),\n/* harmony export */   destroy: () => (/* binding */ destroy),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   hookstate: () => (/* binding */ hookstate),\n/* harmony export */   hookstateMemo: () => (/* binding */ hookstateMemo),\n/* harmony export */   isHookstate: () => (/* binding */ isHookstate),\n/* harmony export */   isHookstateValue: () => (/* binding */ isHookstateValue),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   useHookstate: () => (/* binding */ useHookstate),\n/* harmony export */   useHookstateCallback: () => (/* binding */ useHookstateCallback),\n/* harmony export */   useHookstateEffect: () => (/* binding */ useHookstateEffect),\n/* harmony export */   useHookstateImperativeHandle: () => (/* binding */ useHookstateImperativeHandle),\n/* harmony export */   useHookstateInsertionEffect: () => (/* binding */ useHookstateInsertionEffect),\n/* harmony export */   useHookstateLayoutEffect: () => (/* binding */ useHookstateLayoutEffect),\n/* harmony export */   useHookstateMemo: () => (/* binding */ useHookstateMemo)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * Copied from fbjs is-shallow-equal\n */ var hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 6.b-6.e: +0 != -0\n        // Added the nonzero y check to make Flow happy, but it is redundant\n        return x !== 0 || y !== 0 || 1 / x === 1 / y;\n    } else {\n        // Step 6.a: NaN == NaN\n        return x !== x && y !== y;\n    }\n}\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */ function shallowEqual(objA, objB) {\n    if (is(objA, objB)) {\n        return true;\n    }\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n    }\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for(var i = 0; i < keysA.length; i++){\n        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Special symbol which might be used to delete properties\n * from an object calling [State.set](#set) or [State.merge](#merge).\n *\n * [Learn more...](https://hookstate.js.org/docs/nested-state#deleting-existing-element)\n */ var none = Symbol(\"none\");\n// type PickByType<T, U, B = false> = Pick<T, KeysOfType<T, U, B>>;\n/**\n * A symbol which is used for type inference marking.\n *\n * @hidden\n * @ignore\n */ var __state = Symbol(\"__state\");\nfunction hookstate(initial, extension) {\n    var store = createStore(initial);\n    store.activate(extension);\n    var methods = store.toMethods();\n    return methods.self();\n}\n/**\n * A method to destroy a global state and resources allocated by the extensions\n */ function destroy(state) {\n    state[self].deactivate();\n}\n/**\n * A method to check if a variable is an instance of Hookstate State\n */ function isHookstate(v) {\n    return !!(v === null || v === void 0 ? void 0 : v[self]);\n}\n/**\n * A method to check if a variable is an instance of traced (wrapped in a proxy) Hookstate Value\n */ function isHookstateValue(v) {\n    return !!(v === null || v === void 0 ? void 0 : v[SelfMethodsID]);\n}\n/**\n * A function combines multiple extensions into one extension and returns it\n * Browse an example [here](https://hookstate.js.org/docs/extensions-snapshotable)\n */ function extend(e1, e2, e3, e4, e5) {\n    function extended(extensions) {\n        var exts = extensions.map(function(i) {\n            return i();\n        });\n        var onInitCbs = exts.map(function(i) {\n            return i.onInit;\n        }).filter(function(i) {\n            return i;\n        });\n        var onPremergeCbs = exts.map(function(i) {\n            return i.onPremerge;\n        }).filter(function(i) {\n            return i;\n        });\n        var onPresetCbs = exts.map(function(i) {\n            return i.onPreset;\n        }).filter(function(i) {\n            return i;\n        });\n        var onSetCbs = exts.map(function(i) {\n            return i.onSet;\n        }).filter(function(i) {\n            return i;\n        });\n        var onDestroyCbs = exts.map(function(i) {\n            return i.onDestroy;\n        }).filter(function(i) {\n            return i;\n        });\n        var result = {\n            onCreate: function(instanceFactory, combinedMethods) {\n                for(var _i = 0, exts_1 = exts; _i < exts_1.length; _i++){\n                    var ext = exts_1[_i];\n                    if (ext.onCreate) {\n                        var extMethods = ext.onCreate(instanceFactory, combinedMethods);\n                        Object.assign(combinedMethods, extMethods);\n                    }\n                }\n                return combinedMethods;\n            }\n        };\n        if (onInitCbs.length > 0) {\n            result.onInit = function(s, e) {\n                for(var _i = 0, onInitCbs_1 = onInitCbs; _i < onInitCbs_1.length; _i++){\n                    var cb = onInitCbs_1[_i];\n                    cb(s, e);\n                }\n            };\n        }\n        if (onPremergeCbs.length > 0) {\n            result.onPremerge = function(s, d, r) {\n                for(var _i = 0, onPremergeCbs_1 = onPremergeCbs; _i < onPremergeCbs_1.length; _i++){\n                    var cb = onPremergeCbs_1[_i];\n                    cb(s, d, r);\n                }\n            };\n        }\n        if (onPresetCbs.length > 0) {\n            result.onPreset = function(s, d, r) {\n                for(var _i = 0, onPresetCbs_1 = onPresetCbs; _i < onPresetCbs_1.length; _i++){\n                    var cb = onPresetCbs_1[_i];\n                    cb(s, d, r);\n                }\n            };\n        }\n        if (onSetCbs.length > 0) {\n            result.onSet = function(s, d, r) {\n                for(var _i = 0, onSetCbs_1 = onSetCbs; _i < onSetCbs_1.length; _i++){\n                    var cb = onSetCbs_1[_i];\n                    cb(s, d, r);\n                }\n            };\n        }\n        if (onDestroyCbs.length > 0) {\n            result.onDestroy = function(s) {\n                for(var _i = 0, onDestroyCbs_1 = onDestroyCbs; _i < onDestroyCbs_1.length; _i++){\n                    var cb = onDestroyCbs_1[_i];\n                    cb(s);\n                }\n            };\n        }\n        return result;\n    }\n    return function() {\n        return extended([\n            e1,\n            e2,\n            e3,\n            e4,\n            e5\n        ].filter(function(i) {\n            return i;\n        }));\n    };\n}\nfunction useHookstate(source, extension) {\n    var parentMethods = Object(source) === source ? source[self] : undefined;\n    if (parentMethods) {\n        if (parentMethods.isMounted) {\n            // Scoped state mount\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            var initializer = function() {\n                // warning: this is called twice in react strict mode\n                var store = parentMethods.store;\n                var onSetUsedCallback = function() {\n                    return setValue_1({\n                        store: store,\n                        state: state,\n                        source: value_1.source,\n                        parentMethods: parentMethods\n                    });\n                };\n                var state = new StateMethodsImpl(store, parentMethods.path, store.get(parentMethods.path), store.edition, onSetUsedCallback);\n                return {\n                    store: store,\n                    state: state,\n                    source: source,\n                    parentMethods: parentMethods\n                };\n            };\n            var _a = react__WEBPACK_IMPORTED_MODULE_0___default().useState(initializer), value_1 = _a[0], setValue_1 = _a[1];\n            if (value_1.store !== parentMethods.store || !(\"source\" in value_1)) {\n                value_1.state.onUnmount();\n                value_1.parentMethods.unsubscribe(value_1.state);\n                value_1 = initializer();\n            }\n            // TODO move to a class hide props on prototype level\n            // hide props from development tools\n            Object.defineProperty(value_1, \"store\", {\n                enumerable: false\n            });\n            Object.defineProperty(value_1, \"state\", {\n                enumerable: false\n            });\n            Object.defineProperty(value_1, \"source\", {\n                enumerable: false\n            });\n            Object.defineProperty(value_1, \"parentMethods\", {\n                enumerable: false\n            });\n            value_1.state.reconstruct(parentMethods.path, value_1.store.get(parentMethods.path), value_1.store.edition, // parent state object has changed its reference object\n            // so the scopped state should change too\n            value_1.source !== source);\n            value_1.source = source;\n            // need to subscribe in sync mode, because\n            // safari delays calling the effect giving priority to timeouts and network events,\n            // which can cause the state update\n            parentMethods.subscribe(value_1.state); // no-op if already subscribed\n            useIsomorphicLayoutEffect(function() {\n                // warning: in strict mode, effect is called twice\n                // so need to restore subscription and reconstruct the extension\n                // after the first effect unmount callback\n                value_1.state.onMount(); // no-op if already mounted\n                parentMethods.subscribe(value_1.state); // no-op if already subscribed\n                return function() {\n                    value_1.state.onUnmount();\n                    parentMethods.unsubscribe(value_1.state);\n                };\n            }, []);\n            var state = value_1.state.self();\n            // expose property in development tools\n            value_1[\"[hookstate(scoped)]\"] = state; // TODO use label here, add core extension to label states\n            return state;\n        } else {\n            // Global state mount or destroyed link\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            var initializer = function() {\n                // warning: this is called twice in react strict mode\n                var store = parentMethods.store;\n                var onSetUsedCallback = function() {\n                    return value_2.state.isMounted && setValue_2({\n                        store: store,\n                        state: state,\n                        source: value_2.source // mutable, get the latest from value\n                    });\n                };\n                var state = new StateMethodsImpl(store, RootPath, store.get(RootPath), store.edition, onSetUsedCallback);\n                return {\n                    store: store,\n                    state: state,\n                    source: source\n                };\n            };\n            var _b = react__WEBPACK_IMPORTED_MODULE_0___default().useState(initializer), value_2 = _b[0], setValue_2 = _b[1];\n            if (value_2.store !== parentMethods.store || !(\"source\" in value_2)) {\n                value_2.state.onUnmount();\n                value_2.store.unsubscribe(value_2.state);\n                value_2 = initializer();\n            }\n            // hide props from development tools\n            Object.defineProperty(value_2, \"store\", {\n                enumerable: false\n            });\n            Object.defineProperty(value_2, \"state\", {\n                enumerable: false\n            });\n            Object.defineProperty(value_2, \"source\", {\n                enumerable: false\n            });\n            value_2.state.reconstruct(RootPath, value_2.store.get(RootPath), value_2.store.edition, // parent state object has changed its reference object\n            // so the scopped state should change too\n            value_2.source !== source);\n            value_2.source = source;\n            // need to subscribe in sync mode, because\n            // safari delays calling the effect giving priority to timeouts and network events,\n            // which can cause the state update\n            value_2.store.subscribe(value_2.state); // no-op if already subscribed\n            useIsomorphicLayoutEffect(function() {\n                // warning: in strict mode, effect is called twice\n                // so need to restore subscription and reconstruct the extension\n                // after the first effect unmount callback\n                value_2.state.onMount(); // no-op if already mounted\n                value_2.store.subscribe(value_2.state); // no-op if already subscribed\n                return function() {\n                    value_2.state.onUnmount();\n                    value_2.store.unsubscribe(value_2.state);\n                };\n            }, []);\n            var state = value_2.state.self();\n            for(var ind = 0; ind < parentMethods.path.length; ind += 1){\n                state = state.nested(parentMethods.path[ind]);\n            }\n            // expose property in development tools\n            value_2[\"[hookstate(global)]\"] = state; // TODO use label here, add core extension to label states\n            return state;\n        }\n    } else {\n        // Local state mount\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        var initializer = function() {\n            // warning: this is called twice in react strict mode\n            var store = createStore(source);\n            var onSetUsedCallback = function() {\n                return value_3.state.isMounted && setValue_3({\n                    store: store,\n                    state: state\n                });\n            };\n            var state = new StateMethodsImpl(store, RootPath, store.get(RootPath), store.edition, onSetUsedCallback);\n            return {\n                store: store,\n                state: state\n            };\n        };\n        var _c = react__WEBPACK_IMPORTED_MODULE_0___default().useState(initializer), value_3 = _c[0], setValue_3 = _c[1];\n        if (\"source\" in value_3) {\n            value_3.state.onUnmount();\n            value_3.store.unsubscribe(value_3.state);\n            value_3.store.deactivate();\n            value_3 = initializer();\n        }\n        // hide props from development tools\n        Object.defineProperty(value_3, \"store\", {\n            enumerable: false\n        });\n        Object.defineProperty(value_3, \"state\", {\n            enumerable: false\n        });\n        value_3.state.reconstruct(RootPath, value_3.store.get(RootPath), value_3.store.edition, false);\n        // need to subscribe in sync mode, because\n        // safari delays calling the effect giving priority to timeouts and network events,\n        // which can cause the state update\n        value_3.store.subscribe(value_3.state); // no-op if already subscribed\n        // need to attach the extension straight away\n        // because extension methods are used in render function\n        // and we can not defer it to the effect callback\n        value_3.store.activate(extension); // no-op if already attached\n        useIsomorphicLayoutEffect(function() {\n            // warning: in strict mode, effect is called twice\n            // so need to restore subscription and reconstruct the extension\n            // after the first effect unmount callback\n            value_3.state.onMount(); // no-op if already mounted\n            value_3.store.subscribe(value_3.state); // no-op if already subscribed\n            value_3.store.activate(extension); // no-op if already attached\n            return function() {\n                value_3.state.onUnmount();\n                value_3.store.unsubscribe(value_3.state);\n                value_3.store.deactivate(); // this will destroy the extensions\n            };\n        }, []);\n        var state = value_3.state.self();\n        // expose property in development tools\n        value_3[\"[hookstate(local)]\"] = state; // TODO use label here, add core extension to label states\n        return state;\n    }\n}\nfunction StateFragment(props) {\n    var scoped = useHookstate(props.state, props.extension);\n    return props.suspend && suspend(scoped) || props.children(scoped);\n}\n/**\n * If state is promised, then it returns a component which integrates with React 18 Suspend feature automatically.\n * Note, that React 18 Suspend support for data loading is still experimental,\n * but it worked as per our experiments and testing.\n */ function suspend(state) {\n    var p = state.promise;\n    return p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().lazy(function() {\n        return p;\n    }));\n}\n///\n/// INTERNAL SYMBOLS (LIBRARY IMPLEMENTATION)\n///\nvar self = Symbol(\"self\");\nvar ErrorId;\n(function(ErrorId) {\n    ErrorId[ErrorId[\"StateUsedInDependencyList\"] = 100] = \"StateUsedInDependencyList\";\n    ErrorId[ErrorId[\"InitStateToValueFromState\"] = 101] = \"InitStateToValueFromState\";\n    ErrorId[ErrorId[\"SetStateToValueFromState\"] = 102] = \"SetStateToValueFromState\";\n    ErrorId[ErrorId[\"GetStateWhenPromised\"] = 103] = \"GetStateWhenPromised\";\n    ErrorId[ErrorId[\"SetStateWhenPromised\"] = 104] = \"SetStateWhenPromised\";\n    ErrorId[ErrorId[\"SetStateNestedToPromised\"] = 105] = \"SetStateNestedToPromised\";\n    ErrorId[ErrorId[\"SetStateWhenDestroyed\"] = 106] = \"SetStateWhenDestroyed\";\n    ErrorId[ErrorId[\"ToJson_Value\"] = 108] = \"ToJson_Value\";\n    ErrorId[ErrorId[\"ToJson_State\"] = 109] = \"ToJson_State\";\n    ErrorId[ErrorId[\"GetProperty_Function\"] = 110] = \"GetProperty_Function\";\n    ErrorId[ErrorId[\"InitStateStoreSwitchover\"] = 111] = \"InitStateStoreSwitchover\";\n    ErrorId[ErrorId[\"GetUnknownPlugin\"] = 120] = \"GetUnknownPlugin\";\n    ErrorId[ErrorId[\"SetProperty_State\"] = 201] = \"SetProperty_State\";\n    ErrorId[ErrorId[\"SetProperty_Value\"] = 202] = \"SetProperty_Value\";\n    ErrorId[ErrorId[\"SetPrototypeOf_State\"] = 203] = \"SetPrototypeOf_State\";\n    ErrorId[ErrorId[\"SetPrototypeOf_Value\"] = 204] = \"SetPrototypeOf_Value\";\n    ErrorId[ErrorId[\"PreventExtensions_State\"] = 205] = \"PreventExtensions_State\";\n    ErrorId[ErrorId[\"PreventExtensions_Value\"] = 206] = \"PreventExtensions_Value\";\n    ErrorId[ErrorId[\"DefineProperty_State\"] = 207] = \"DefineProperty_State\";\n    ErrorId[ErrorId[\"DefineProperty_Value\"] = 208] = \"DefineProperty_Value\";\n    ErrorId[ErrorId[\"DeleteProperty_State\"] = 209] = \"DeleteProperty_State\";\n    ErrorId[ErrorId[\"DeleteProperty_Value\"] = 210] = \"DeleteProperty_Value\";\n    ErrorId[ErrorId[\"Construct_State\"] = 211] = \"Construct_State\";\n    ErrorId[ErrorId[\"Construct_Value\"] = 212] = \"Construct_Value\";\n    ErrorId[ErrorId[\"Apply_State\"] = 213] = \"Apply_State\";\n    ErrorId[ErrorId[\"Apply_Value\"] = 214] = \"Apply_Value\";\n})(ErrorId || (ErrorId = {}));\nvar StateInvalidUsageError = /** @class */ function(_super) {\n    __extends(StateInvalidUsageError, _super);\n    function StateInvalidUsageError(path, id, details) {\n        return _super.call(this, \"Error: HOOKSTATE-\".concat(id, \" [path: /\").concat(path.join(\"/\")).concat(details ? \", details: \".concat(details) : \"\", \"]. \") + \"See https://hookstate.js.org/docs/exceptions#hookstate-\".concat(id)) || this;\n    }\n    return StateInvalidUsageError;\n}(Error);\nvar SelfMethodsID = Symbol(\"ProxyMarker\");\nvar RootPath = [];\nvar Store = /** @class */ function() {\n    function Store(_value) {\n        var _this = this;\n        this._value = _value;\n        // > 0 means active store, < 0 means destroyed\n        // please note, in react strict mode and hot reload cases\n        // state can be reused, so we should support store resurection\n        this.edition = 1;\n        this._subscribers = new Set();\n        if (Object(_value) === _value && configuration.promiseDetector(_value)) {\n            this.setPromised(_value);\n        } else if (_value === none) {\n            this.setPromised(undefined);\n        }\n        var onSetUsedStoreStateMethods = function() {\n            _this._stateMethods.reconstruct(RootPath, _this.get(RootPath), _this.edition, false);\n        };\n        onSetUsedStoreStateMethods[IsUnmounted] = true;\n        this._stateMethods = new StateMethodsImpl(this, RootPath, this.get(RootPath), this.edition, onSetUsedStoreStateMethods);\n        this.subscribe(this._stateMethods);\n    }\n    Store.prototype.setPromised = function(promise) {\n        var _this = this;\n        this._value = none;\n        this._promiseError = undefined;\n        this._promiseResolver = undefined;\n        if (!promise) {\n            this._promise = new Promise(function(resolve) {\n                _this._promiseResolver = resolve;\n            });\n            return;\n        }\n        promise = promise.then(function(r) {\n            if (_this._promise === promise) {\n                _this._promise = undefined;\n                _this._promiseError = undefined;\n                _this._promiseResolver === undefined;\n                _this.update(_this._stateMethods.self(), _this.set(RootPath, r));\n            }\n        }).catch(function(err) {\n            if (_this._promise === promise) {\n                _this._promise = undefined;\n                _this._promiseResolver = undefined;\n                _this._promiseError = err;\n                _this.edition += 1;\n                var ad = {\n                    path: RootPath\n                };\n                _this.update(_this._stateMethods.self(), ad);\n            }\n        });\n        this._promise = promise;\n    };\n    Store.prototype.activate = function(extensionFactory) {\n        var _a, _b, _c, _d;\n        if (this.edition < 0) {\n            this.edition = -this.edition;\n        }\n        if (this._extension === undefined) {\n            this._extension = extensionFactory === null || extensionFactory === void 0 ? void 0 : extensionFactory();\n            this._extensionMethods = (_b = (_a = this._extension) === null || _a === void 0 ? void 0 : _a.onCreate) === null || _b === void 0 ? void 0 : _b.call(_a, this._stateMethods.self(), {});\n            // this is invoked with all extension methods activated on the state\n            (_d = (_c = this._extension) === null || _c === void 0 ? void 0 : _c.onInit) === null || _d === void 0 ? void 0 : _d.call(_c, this._stateMethods.self(), this._extensionMethods || {});\n        }\n    };\n    Store.prototype.deactivate = function() {\n        var _a, _b;\n        if (this._extension) {\n            (_b = (_a = this._extension).onDestroy) === null || _b === void 0 ? void 0 : _b.call(_a, this._stateMethods.self());\n            delete this._extension;\n            delete this._extensionMethods;\n        }\n        if (this.edition > 0) {\n            this.edition = -this.edition;\n        }\n    };\n    Object.defineProperty(Store.prototype, \"extension\", {\n        get: function() {\n            return this._extensionMethods;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, \"promise\", {\n        get: function() {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, \"promiseError\", {\n        get: function() {\n            return this._promiseError;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Store.prototype.get = function(path) {\n        var result = this._value;\n        if (result === none) {\n            return result;\n        }\n        path.forEach(function(p) {\n            result = result[p];\n        });\n        return result;\n    };\n    Store.prototype.set = function(path, value) {\n        var _a, _b;\n        if (path.length === 0) {\n            // Root value UPDATE case,\n            if (value === none) {\n                this.setPromised(undefined);\n            } else if (Object(value) === value && configuration.promiseDetector(value)) {\n                this.setPromised(value);\n                value = none;\n            } else if (this._promise && !this._promiseResolver) {\n                throw new StateInvalidUsageError(path, ErrorId.SetStateWhenPromised);\n            } else {\n                this._promiseError = undefined;\n            }\n            var prevValue = this._value;\n            this._value = value;\n            this.afterSet();\n            if (prevValue === none && this._value !== none && this._promiseResolver) {\n                this._promise = undefined;\n                this._promiseError = undefined;\n                var resolver = this._promiseResolver;\n                this._promiseResolver === undefined;\n                resolver(this._value);\n            }\n            return {\n                path: path\n            };\n        }\n        if (Object(value) === value && configuration.promiseDetector(value)) {\n            // TODO this one still can get into the state as nested property, need to check on read instead\n            throw new StateInvalidUsageError(path, ErrorId.SetStateNestedToPromised);\n        }\n        var target = this._value;\n        for(var i = 0; i < path.length - 1; i += 1){\n            target = target[path[i]];\n        }\n        var p = path[path.length - 1];\n        if (p in target) {\n            if (value !== none) {\n                // Property UPDATE case\n                target[p] = value;\n                this.afterSet();\n                return {\n                    path: path\n                };\n            } else {\n                // Property DELETE case\n                if (Array.isArray(target) && typeof p === \"number\") {\n                    target.splice(p, 1);\n                } else {\n                    delete target[p];\n                }\n                this.afterSet();\n                // if an array of objects is about to loose existing property\n                // we consider it is the whole object is changed\n                // which is identified by upper path\n                return {\n                    path: path.slice(0, -1),\n                    actions: (_a = {}, _a[p] = \"D\", _a)\n                };\n            }\n        }\n        if (value !== none) {\n            // Property INSERT case\n            target[p] = value;\n            this.afterSet();\n            // if an array of objects is about to be extended by new property\n            // we consider it is the whole object is changed\n            // which is identified by upper path\n            return {\n                path: path.slice(0, -1),\n                actions: (_b = {}, _b[p] = \"I\", _b)\n            };\n        }\n        // Non-existing property DELETE case\n        // no-op\n        return {\n            path: path\n        };\n    };\n    Store.prototype.preset = function(state, value) {\n        var _a, _b;\n        (_b = (_a = this._extension) === null || _a === void 0 ? void 0 : _a.onPreset) === null || _b === void 0 ? void 0 : _b.call(_a, state, value, this._stateMethods.self());\n    };\n    Store.prototype.premerge = function(state, value) {\n        var _a, _b;\n        (_b = (_a = this._extension) === null || _a === void 0 ? void 0 : _a.onPremerge) === null || _b === void 0 ? void 0 : _b.call(_a, state, value, this._stateMethods.self());\n    };\n    Store.prototype.update = function(state, ad) {\n        var _this = this;\n        var _a, _b;\n        (_b = (_a = this._extension) === null || _a === void 0 ? void 0 : _a.onSet) === null || _b === void 0 ? void 0 : _b.call(_a, state, ad, this._stateMethods.self());\n        var actions = new Set();\n        // check if actions descriptor can be unfolded into a number of individual update actions\n        // this is the case when merge call swaps to properties for example\n        // so we optimize rerendering only these properties\n        if (ad.actions && Object.values(ad.actions).findIndex(function(i) {\n            return i !== \"U\";\n        }) === -1) {\n            // all actions are update actions\n            Object.keys(ad.actions).forEach(function(key) {\n                _this._subscribers.forEach(function(s) {\n                    return s.onSet({\n                        path: ad.path.concat(key)\n                    }, actions);\n                });\n            });\n        } else {\n            this._subscribers.forEach(function(s) {\n                return s.onSet(ad, actions);\n            });\n        }\n        actions.forEach(function(a) {\n            return a();\n        });\n    };\n    Store.prototype.afterSet = function() {\n        if (this.edition > 0) {\n            this.edition += 1;\n        }\n        if (this.edition < 0) {\n            this.edition -= 1;\n        }\n    };\n    Store.prototype.toMethods = function() {\n        return this._stateMethods;\n    };\n    Store.prototype.subscribe = function(l) {\n        this._subscribers.add(l);\n    };\n    Store.prototype.unsubscribe = function(l) {\n        this._subscribers.delete(l);\n    };\n    Store.prototype.toJSON = function() {\n        throw new StateInvalidUsageError(RootPath, ErrorId.ToJson_Value);\n    };\n    return Store;\n}();\n// use symbol property to allow for easier reference finding\nvar UnusedValue = Symbol(\"UnusedValue\");\n// use symbol to mark that a function has no effect anymore\nvar IsUnmounted = Symbol(\"IsUnmounted\");\nvar StateMethodsImpl = /** @class */ function() {\n    function StateMethodsImpl(store, path, valueSource, valueEdition, onSetUsed) {\n        this.store = store;\n        this.path = path;\n        this.valueSource = valueSource;\n        this.valueEdition = valueEdition;\n        this.onSetUsed = onSetUsed;\n        this.valueUsed = UnusedValue;\n    }\n    Object.defineProperty(StateMethodsImpl.prototype, __state, {\n        get: function() {\n            return [\n                this.get(),\n                this.self()\n            ];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateMethodsImpl.prototype.reconstruct = function(path, valueSource, valueEdition, reset) {\n        this.path = path;\n        this.valueSource = valueSource;\n        this.valueEdition = valueEdition;\n        this.valueUsed = UnusedValue;\n        if (reset) {\n            delete this.selfUsed;\n            delete this.childrenCreated;\n            delete this.childrenUsedPrevious;\n        } else {\n            this.valueUsedNoProxyPrevious = this.valueUsedNoProxy;\n            this.childrenUsedPrevious = this.childrenUsed;\n        }\n        delete this.valueUsedNoProxy;\n        delete this.childrenUsed;\n    // We should not delete subscribers as these are self cleaned up when unmounted\n    // Theoretically it is possible to reconnect subscribers like we done it for \n    // children, but it is easier and more efficient to leave subscribers to have independent lifecycle\n    // If we delete subscribers here, scoped states wrapped in React.memo\n    // will lose state change propagation and rerendering for scopped states\n    // delete this.subscribers;\n    };\n    StateMethodsImpl.prototype.reconnect = function() {\n        // Mark it's as used, because it is used in a dependency list\n        // (we are making it's value used implicitly, so rerender is triggered).\n        // Otherwise, no rerender => no effects running, even when a value is changed.\n        // This is marking the state used a bit more than it might be really used\n        // in the effect callback. More optimized / precise implementation would be\n        // to remember useSelf as previous (similar to childrenUsed),\n        // but it is a lot more complicated and the benefit is not worth the complexity.\n        // So, mark it used.\n        // We also using it without proxy if it wass used without proxy during the\n        // previous render, because otherwise children usage might be not traced completely\n        // and so will not result in renreder if children are updated.\n        // This is covered by some tests, but there are so many possible corner cases...\n        this.get({\n            __internalAllowPromised: true,\n            noproxy: this.valueUsedNoProxyPrevious\n        });\n        this.childrenUsed = __assign(__assign({}, this.childrenUsedPrevious), this.childrenUsed);\n    };\n    StateMethodsImpl.prototype.getUntracked = function(__internalAllowPromised) {\n        if (this.valueEdition !== this.store.edition) {\n            this.valueSource = this.store.get(this.path);\n            this.valueEdition = this.store.edition;\n            if (this.valueUsed !== UnusedValue) {\n                this.valueUsed = UnusedValue;\n                this.get({\n                    __internalAllowPromised: true\n                }); // renew cache to keep it marked used\n            }\n        }\n        if (__internalAllowPromised) {\n            return this.valueSource;\n        }\n        if (this.store.promiseError) {\n            throw this.store.promiseError;\n        }\n        if (this.store.promise) {\n            throw new StateInvalidUsageError(this.path, ErrorId.GetStateWhenPromised);\n        }\n        return this.valueSource;\n    };\n    StateMethodsImpl.prototype.get = function(options) {\n        var _a;\n        var valueSource = this.getUntracked(options === null || options === void 0 ? void 0 : options.__internalAllowPromised);\n        if (options === null || options === void 0 ? void 0 : options.stealth) {\n            return valueSource;\n        }\n        if (this.valueUsed === UnusedValue) {\n            if (Array.isArray(valueSource)) {\n                this.valueUsed = this.valueArrayImpl(valueSource);\n            } else if (Object(valueSource) === valueSource) {\n                if (((_a = valueSource.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Object\") {\n                    this.valueUsed = this.valueObjectImpl(valueSource);\n                } else {\n                    // any other object except Object, for example Date\n                    this.valueUsedNoProxy = true;\n                    this.valueUsed = valueSource;\n                }\n            } else {\n                this.valueUsed = valueSource;\n            }\n        }\n        if (options === null || options === void 0 ? void 0 : options.noproxy) {\n            this.valueUsedNoProxy = true;\n            return valueSource;\n        }\n        return this.valueUsed;\n    };\n    Object.defineProperty(StateMethodsImpl.prototype, \"value\", {\n        get: function() {\n            // various tools, including react dev tools and webpack import\n            // inspect an object and it's properties\n            // so these should not throw\n            // return this.get({ __internalAllowPromised: true })\n            return this.get();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateMethodsImpl.prototype.setUntrackedV4 = function(newValue) {\n        if (typeof newValue === \"function\") {\n            newValue = newValue(this.getUntracked());\n        }\n        this.store.preset(this.self(), newValue);\n        if (Object(newValue) === newValue && newValue[SelfMethodsID]) {\n            // TODO check on read instead as it might escape as nested on set anyway\n            throw new StateInvalidUsageError(this.path, ErrorId.SetStateToValueFromState);\n        }\n        if (newValue !== Object(newValue) && newValue === this.getUntracked(true)) {\n            // this is primitive value and has not changed\n            // so skip this set call as it does not make an effect\n            return null;\n        }\n        return this.store.set(this.path, newValue);\n    };\n    StateMethodsImpl.prototype.set = function(newValue) {\n        var ad = this.setUntrackedV4(newValue);\n        if (ad) {\n            this.store.update(this.self(), ad);\n        }\n    };\n    StateMethodsImpl.prototype.mergeUntracked = function(sourceValue) {\n        var r = this.mergeUntrackedV4(sourceValue);\n        if (r) {\n            return [\n                r.path\n            ];\n        }\n        return [];\n    };\n    StateMethodsImpl.prototype.mergeUntrackedV4 = function(sourceValue) {\n        var currentValue = this.getUntracked();\n        if (typeof sourceValue === \"function\") {\n            sourceValue = sourceValue(currentValue);\n        }\n        this.store.premerge(this.self(), sourceValue);\n        if (Array.isArray(currentValue)) {\n            if (Array.isArray(sourceValue)) {\n                var ad_1 = {\n                    path: this.path,\n                    actions: {}\n                };\n                sourceValue.forEach(function(e, i) {\n                    ad_1.actions[currentValue.push(e) - 1] = \"I\";\n                });\n                if (Object.keys(ad_1.actions).length > 0) {\n                    this.setUntrackedV4(currentValue);\n                    return ad_1;\n                }\n                return null;\n            } else {\n                var ad_2 = {\n                    path: this.path,\n                    actions: {}\n                };\n                var deletedIndexes_1 = [];\n                Object.keys(sourceValue).map(function(i) {\n                    return Number(i);\n                }).sort(function(a, b) {\n                    return a - b;\n                }).forEach(function(i) {\n                    var index = Number(i);\n                    var newPropValue = sourceValue[index];\n                    if (newPropValue === none) {\n                        ad_2.actions[index] = \"D\";\n                        deletedIndexes_1.push(index);\n                    } else {\n                        if (index in currentValue) {\n                            ad_2.actions[index] = \"U\";\n                        } else {\n                            ad_2.actions[index] = \"I\";\n                        }\n                        currentValue[index] = newPropValue;\n                    }\n                });\n                // indexes are ascending sorted as per above\n                // so, delete one by one from the end\n                // this way index positions do not change\n                deletedIndexes_1.reverse().forEach(function(p) {\n                    currentValue.splice(p, 1);\n                });\n                if (Object.keys(ad_2.actions).length > 0) {\n                    this.setUntrackedV4(currentValue);\n                    return ad_2;\n                }\n                return null;\n            }\n        } else if (Object(currentValue) === currentValue) {\n            var ad_3 = {\n                path: this.path,\n                actions: {}\n            };\n            Object.keys(sourceValue).forEach(function(key) {\n                var newPropValue = sourceValue[key];\n                if (newPropValue === none) {\n                    ad_3.actions[key] = \"D\";\n                    delete currentValue[key];\n                } else {\n                    if (key in currentValue) {\n                        ad_3.actions[key] = \"U\";\n                    } else {\n                        ad_3.actions[key] = \"I\";\n                    }\n                    currentValue[key] = newPropValue;\n                }\n            });\n            if (Object.keys(ad_3.actions).length > 0) {\n                this.setUntrackedV4(currentValue);\n                return ad_3;\n            }\n            return null;\n        } else if (typeof currentValue === \"string\") {\n            return this.setUntrackedV4(currentValue + String(sourceValue));\n        } else {\n            return this.setUntrackedV4(sourceValue);\n        }\n    };\n    StateMethodsImpl.prototype.merge = function(sourceValue) {\n        var r = this.mergeUntrackedV4(sourceValue);\n        if (r) {\n            this.store.update(this.self(), r);\n        }\n    };\n    StateMethodsImpl.prototype.nested = function(key) {\n        return this.child(key).self();\n    };\n    StateMethodsImpl.prototype.rerender = function(paths) {\n        for(var _i = 0, paths_1 = paths; _i < paths_1.length; _i++){\n            var path = paths_1[_i];\n            this.store.update(this.self(), {\n                path: path\n            });\n        }\n    };\n    StateMethodsImpl.prototype.activate = function(extensionFactory) {\n        this.store.activate(extensionFactory);\n    };\n    StateMethodsImpl.prototype.deactivate = function() {\n        this.store.deactivate();\n    };\n    StateMethodsImpl.prototype.subscribe = function(l) {\n        if (this.subscribers === undefined) {\n            this.subscribers = new Set();\n        }\n        this.subscribers.add(l);\n    };\n    StateMethodsImpl.prototype.unsubscribe = function(l) {\n        if (this.subscribers) {\n            this.subscribers.delete(l);\n        }\n    };\n    Object.defineProperty(StateMethodsImpl.prototype, \"isMounted\", {\n        get: function() {\n            return !this.onSetUsed[IsUnmounted];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateMethodsImpl.prototype.onMount = function() {\n        delete this.onSetUsed[IsUnmounted];\n    };\n    StateMethodsImpl.prototype.onUnmount = function() {\n        this.onSetUsed[IsUnmounted] = true;\n    };\n    StateMethodsImpl.prototype.onSet = function(ad, actions) {\n        var _this = this;\n        var update = function() {\n            var _a;\n            var isAffected = false;\n            if (_this.valueUsedNoProxy && _this.valueUsed !== UnusedValue) {\n                actions.add(_this.onSetUsed);\n                delete _this.selfUsed;\n                isAffected = true;\n            }\n            var path = ad.path;\n            var nextChildKey = path[_this.path.length];\n            if (nextChildKey === undefined) {\n                // There is no next child to dive into\n                // So it is this one which was updated\n                if (_this.valueUsed !== UnusedValue) {\n                    actions.add(_this.onSetUsed);\n                    delete _this.selfUsed;\n                    delete _this.childrenUsed;\n                    if (ad.actions && _this.childrenCreated) {\n                        // TODO add automated unit tests for this part\n                        if (Array.isArray(_this.valueSource) && Object.values(ad.actions).includes(\"D\")) {\n                            // this is an array and some elements were removed\n                            // so invalidate cache for all children after the first deleted\n                            var firstDeletedIndex = Object.keys(ad.actions).map(function(i) {\n                                return Number(i);\n                            }).sort(function(a, b) {\n                                return a - b;\n                            }).find(function(i) {\n                                var _a;\n                                return ((_a = ad.actions) === null || _a === void 0 ? void 0 : _a[i]) === \"D\";\n                            });\n                            for(var childKey in _this.childrenCreated){\n                                if (Number(childKey) >= firstDeletedIndex || childKey in ad.actions) {\n                                    delete _this.childrenCreated[childKey];\n                                }\n                            }\n                        } else {\n                            for(var childKey in ad.actions){\n                                delete _this.childrenCreated[childKey];\n                            }\n                        }\n                    } else {\n                        delete _this.childrenCreated;\n                    }\n                    return true;\n                }\n            } else {\n                var nextChild = (_a = _this.childrenUsed) === null || _a === void 0 ? void 0 : _a[nextChildKey];\n                if (nextChild && nextChild.onSet(ad, actions)) {\n                    delete _this.selfUsed;\n                    return true;\n                }\n            }\n            return isAffected;\n        };\n        var updated = update();\n        if (!updated && this.subscribers !== undefined) {\n            this.subscribers.forEach(function(s) {\n                if (s.onSet(ad, actions)) {\n                    delete _this.selfUsed;\n                }\n            });\n        }\n        return updated;\n    };\n    Object.defineProperty(StateMethodsImpl.prototype, \"keys\", {\n        get: function() {\n            var value = this.get();\n            if (Array.isArray(value)) {\n                return Object.keys(value).map(function(i) {\n                    return Number(i);\n                }).filter(function(i) {\n                    return Number.isInteger(i);\n                });\n            }\n            if (Object(value) === value) {\n                return Object.keys(value);\n            }\n            return undefined;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateMethodsImpl.prototype.child = function(key) {\n        this.childrenUsed = this.childrenUsed || {};\n        var cachedChild = this.childrenUsed.hasOwnProperty(key) && this.childrenUsed[key];\n        if (cachedChild) {\n            return cachedChild;\n        }\n        var valueSource = this.valueSource[key];\n        if (typeof valueSource === \"function\") {\n            // hitting a method of a custom type, should be no-op\n            throw new StateInvalidUsageError(this.path, ErrorId.GetProperty_Function);\n        }\n        this.childrenCreated = this.childrenCreated || {};\n        var child = this.childrenCreated[key];\n        var r;\n        if (child) {\n            child.reconstruct(this.path.concat(key), valueSource, this.valueEdition, false);\n            r = child;\n        } else {\n            r = new StateMethodsImpl(this.store, this.path.concat(key), valueSource, this.valueEdition, this.onSetUsed);\n            this.childrenCreated[key] = r;\n        }\n        if (this.valueUsedNoProxy) {\n            // TODO this is redundant when Downgraded plugin is deleted\n            r.valueUsedNoProxy = true;\n        }\n        this.childrenUsed[key] = r;\n        return r;\n    };\n    StateMethodsImpl.prototype.valueArrayImpl = function(currentValue) {\n        var _this = this;\n        return proxyWrap(this.path, currentValue, function() {\n            return currentValue;\n        }, function(target, key) {\n            if (key === \"length\") {\n                return target.length;\n            }\n            if (key in Array.prototype) {\n                return Array.prototype[key];\n            }\n            if (key === SelfMethodsID) {\n                return _this;\n            }\n            if (typeof key === \"symbol\") {\n                // allow clients to associate hidden cache with state values\n                return target[key];\n            }\n            var index = Number(key);\n            if (!Number.isInteger(index)) {\n                return undefined;\n            }\n            return _this.child(index).get();\n        }, function(target, key, value) {\n            if (typeof key === \"symbol\") {\n                // allow clients to associate hidden cache with state values\n                target[key] = value;\n                return true;\n            }\n            throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_Value);\n        }, true);\n    };\n    StateMethodsImpl.prototype.valueObjectImpl = function(currentValue) {\n        var _this = this;\n        return proxyWrap(this.path, currentValue, function() {\n            return currentValue;\n        }, function(target, key) {\n            if (key in Object.prototype) {\n                return Object.prototype[key];\n            }\n            if (key === SelfMethodsID) {\n                return _this;\n            }\n            if (typeof key === \"symbol\") {\n                // allow clients to associate hidden cache with state values\n                return target[key];\n            }\n            return _this.child(key).get();\n        }, function(target, key, value) {\n            if (typeof key === \"symbol\") {\n                // allow clients to associate hidden cache with state values\n                target[key] = value;\n                return true;\n            }\n            throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_Value);\n        }, true);\n    };\n    StateMethodsImpl.prototype.self = function() {\n        var _this = this;\n        if (this.selfUsed) {\n            return this.selfUsed;\n        }\n        var getter = function(_, key) {\n            if (key === self) {\n                return _this;\n            }\n            if (typeof key === \"symbol\") {\n                return undefined;\n            }\n            if (key === \"toJSON\") {\n                throw new StateInvalidUsageError(_this.path, ErrorId.ToJson_State);\n            }\n            var nestedGetter = function(prop) {\n                var currentValue = _this.get({\n                    __internalAllowPromised: prop === \"$$typeof\" || prop === \"constructor\"\n                });\n                if (prop in Object.prototype) {\n                    // Mark it used entirely, so changes to the value\n                    // invalidate and rerender results for Object.prototype.toString(),\n                    // for example.\n                    // We check for Object prototype functions\n                    // even for primitive values, because primitive values still\n                    // can have object methods.\n                    return Object.prototype[prop];\n                }\n                if (Object(currentValue) !== currentValue && // if promised, it will be none\n                currentValue !== none) {\n                    // This was an error case, but various tools like webpack bundler\n                    // and react dev tools attempt to get props out of non-null object,\n                    // so this was changed to return just undefined for any property request\n                    // as there is no way to fix 3rd party tools.\n                    // Logging a warning to console is also not an option\n                    // as it pollutes console for legitimate apps on app start app.\n                    // Ref: https://github.com/avkonst/hookstate/issues/125\n                    return undefined;\n                }\n                if (Array.isArray(currentValue)) {\n                    if (prop === \"length\") {\n                        return currentValue.length;\n                    }\n                    if (prop in Array.prototype) {\n                        return Array.prototype[prop];\n                    }\n                    var index = Number(prop);\n                    if (!Number.isInteger(index)) {\n                        return undefined;\n                    }\n                    return _this.nested(index);\n                }\n                return _this.nested(prop.toString());\n            };\n            switch(key){\n                case \"path\":\n                    return _this.path;\n                case \"keys\":\n                    return _this.keys;\n                case \"value\":\n                    return _this.value;\n                case \"ornull\":\n                    return _this.ornull;\n                case \"promised\":\n                    return _this.promised;\n                case \"promise\":\n                    return _this.promise;\n                case \"error\":\n                    return _this.error;\n                case \"get\":\n                    return function(opts) {\n                        return _this.get(opts);\n                    };\n                case \"set\":\n                    return function(p) {\n                        return _this.set(p);\n                    };\n                case \"merge\":\n                    return function(p) {\n                        return _this.merge(p);\n                    };\n                case \"nested\":\n                    return function(p) {\n                        return nestedGetter(p);\n                    };\n                default:\n                    // check if extension method\n                    var ext = _this.store.extension;\n                    if (ext && key in ext) {\n                        return ext[key](_this.self());\n                    }\n                    // otherwise nested child\n                    return nestedGetter(key);\n            }\n        };\n        this.selfUsed = proxyWrap(this.path, this.valueSource, function(opts) {\n            return _this.get({\n                __internalAllowPromised: true,\n                stealth: opts === null || opts === void 0 ? void 0 : opts.stealth\n            });\n        }, getter, function(_, key, value) {\n            throw new StateInvalidUsageError(_this.path, ErrorId.SetProperty_State);\n        }, false);\n        return this.selfUsed;\n    };\n    Object.defineProperty(StateMethodsImpl.prototype, \"promised\", {\n        get: function() {\n            this.get({\n                __internalAllowPromised: true\n            }); // marks used\n            return !!this.store.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMethodsImpl.prototype, \"promise\", {\n        get: function() {\n            var _this = this;\n            var _a;\n            this.get({\n                __internalAllowPromised: true\n            }); // marks used\n            return (_a = this.store.promise) === null || _a === void 0 ? void 0 : _a.then(function(_) {\n                return _this.self();\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMethodsImpl.prototype, \"error\", {\n        get: function() {\n            this.get({\n                __internalAllowPromised: !!this.store.promiseError\n            }); // marks used\n            return this.store.promiseError;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMethodsImpl.prototype, \"ornull\", {\n        get: function() {\n            var value = this.get();\n            if (value === null || value === undefined) {\n                return value;\n            }\n            return this.self();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return StateMethodsImpl;\n}();\nfunction proxyWrap(path, // tslint:disable-next-line: no-any\ntargetBootstrap, // tslint:disable-next-line: no-any\ntargetGetter, // tslint:disable-next-line: no-any\npropertyGetter, // tslint:disable-next-line: no-any\npropertySetter, isValueProxy) {\n    var onInvalidUsage = function(op) {\n        throw new StateInvalidUsageError(path, op);\n    };\n    if (Object(targetBootstrap) !== targetBootstrap) {\n        targetBootstrap = {};\n    }\n    return new Proxy(targetBootstrap, {\n        getPrototypeOf: function(_target) {\n            // should satisfy the invariants:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf#Invariants\n            var targetReal = targetGetter();\n            if (targetReal === undefined || targetReal === null) {\n                return null;\n            }\n            if (targetReal === none) {\n                return Object.getPrototypeOf(new Promise(function() {}));\n            }\n            return Object.getPrototypeOf(targetReal);\n        },\n        setPrototypeOf: function(_target, v) {\n            return onInvalidUsage(isValueProxy ? ErrorId.SetPrototypeOf_State : ErrorId.SetPrototypeOf_Value);\n        },\n        isExtensible: function(_target) {\n            // should satisfy the invariants:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible#Invariants\n            return true; // required to satisfy the invariants of the getPrototypeOf\n        // return Object.isExtensible(target);\n        },\n        preventExtensions: function(_target) {\n            return onInvalidUsage(isValueProxy ? ErrorId.PreventExtensions_State : ErrorId.PreventExtensions_Value);\n        },\n        getOwnPropertyDescriptor: function(_target, p) {\n            var targetReal = targetGetter();\n            if (Object(targetReal) === targetReal) {\n                var origin_1 = Object.getOwnPropertyDescriptor(targetReal, p);\n                if (Array.isArray(targetReal) && p in Array.prototype) {\n                    return origin_1;\n                }\n                return origin_1 && {\n                    // should be configurable as may not exist on proxy target\n                    configurable: true,\n                    enumerable: origin_1.enumerable,\n                    get: function() {\n                        return propertyGetter(targetReal, p);\n                    },\n                    set: undefined\n                };\n            }\n            if (isValueProxy || targetReal === none) {\n                return undefined;\n            }\n            if (p === \"value\") {\n                return {\n                    // should be configurable as does not exist on proxy target\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return targetGetter({\n                            stealth: true\n                        });\n                    },\n                    set: undefined\n                };\n            }\n            if (p === \"path\") {\n                return {\n                    // should be configurable as does not exist on proxy target\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return path;\n                    },\n                    set: undefined\n                };\n            }\n            return undefined;\n        },\n        has: function(_target, p) {\n            if (typeof p === \"symbol\") {\n                return false;\n            }\n            var targetReal = targetGetter();\n            if (Object(targetReal) === targetReal) {\n                return p in targetReal;\n            }\n            if (isValueProxy || targetReal === none) {\n                return false;\n            }\n            return p === \"value\" || p === \"path\";\n        },\n        get: propertyGetter,\n        set: propertySetter,\n        deleteProperty: function(_target, p) {\n            return onInvalidUsage(isValueProxy ? ErrorId.DeleteProperty_State : ErrorId.DeleteProperty_Value);\n        },\n        defineProperty: function(_target, p, attributes) {\n            return onInvalidUsage(isValueProxy ? ErrorId.DefineProperty_State : ErrorId.DefineProperty_Value);\n        },\n        ownKeys: function(_target) {\n            var targetReal = targetGetter();\n            if (Array.isArray(targetReal)) {\n                if (_target.length === undefined) {\n                    // an object turned into an array now\n                    // inject length property now as it is defined on the array\n                    // to enable getOwnPropertyDescriptor for length not throw\n                    Object.defineProperty(targetBootstrap, \"length\", {\n                        value: 0,\n                        writable: true,\n                        enumerable: false,\n                        configurable: false\n                    });\n                }\n            }\n            if (Object(targetReal) === targetReal) {\n                return Object.getOwnPropertyNames(targetReal);\n            }\n            if (isValueProxy || targetReal === none) {\n                return [];\n            }\n            return [\n                \"value\",\n                \"path\"\n            ];\n        },\n        apply: function(_target, thisArg, argArray) {\n            return onInvalidUsage(isValueProxy ? ErrorId.Apply_State : ErrorId.Apply_Value);\n        },\n        construct: function(_target, argArray, newTarget) {\n            return onInvalidUsage(isValueProxy ? ErrorId.Construct_State : ErrorId.Construct_Value);\n        }\n    });\n}\nfunction createStore(initial) {\n    var initialValue = initial;\n    if (typeof initial === \"function\") {\n        initialValue = initial();\n    }\n    if (Object(initialValue) === initialValue && initialValue[SelfMethodsID]) {\n        throw new StateInvalidUsageError(RootPath, ErrorId.InitStateToValueFromState);\n    }\n    return new Store(initialValue);\n}\nvar configuration = {\n    interceptDependencyListsMode: \"always\",\n    isDevelopmentMode: typeof process === \"object\" && typeof process.env === \"object\" && \"development\" === \"development\",\n    promiseDetector: function(p) {\n        return Promise.resolve(p) === p;\n    },\n    hiddenInterceptDependencyListsModeDebug: false\n};\n/**\n * Configures Hookstate behavior globally. This is for special cases only, when default\n * heuristics fail to work in a specific environment.\n *\n * @param config\n */ function configure(config) {\n    var _a, _b, _c;\n    configuration = {\n        interceptDependencyListsMode: (_a = config.interceptDependencyListsMode) !== null && _a !== void 0 ? _a : configuration.interceptDependencyListsMode,\n        isDevelopmentMode: (_b = config.isDevelopmentMode) !== null && _b !== void 0 ? _b : configuration.isDevelopmentMode,\n        promiseDetector: (_c = config.promiseDetector) !== null && _c !== void 0 ? _c : configuration.promiseDetector,\n        hiddenInterceptDependencyListsModeDebug: false\n    };\n    interceptReactHooks(); // not really required, but for safety\n    if (configuration.interceptDependencyListsMode === \"never\") {\n        configuration.hiddenInterceptDependencyListsModeDebug = false;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect) && useEffectOrigin;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) && useLayoutEffectOrigin;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect) && useInsertionEffectOrigin;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle) = (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle) && useImperativeHandleOrigin;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo) = (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo) && useMemoOrigin;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback) = (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback) && useCallbackOrigin;\n        // the following does not make an effect as memo calls happen on module load\n        // so it is always set to memoIntercept\n        (react__WEBPACK_IMPORTED_MODULE_0___default().memo) = (react__WEBPACK_IMPORTED_MODULE_0___default().memo) && memoOrigin;\n    } else {\n        // do not intercept if a hook is not defined in React\n        // otherwise, it will enable 3rd party libs thinking the react runs at version 18\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect) && useEffectIntercept;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) && useLayoutEffectIntercept;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect) = (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) && useInsertionEffectIntercept;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle) = (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle) && useImperativeHandleIntercept;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo) = (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo) && useMemoIntercept;\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback) = (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback) && useCallbackIntercept;\n        // the following does not make an effect as memo calls happen on module load\n        // so it is always set to memoIntercept\n        (react__WEBPACK_IMPORTED_MODULE_0___default().memo) = (react__WEBPACK_IMPORTED_MODULE_0___default().memo) && memoIntercept;\n        if (configuration.interceptDependencyListsMode === \"development\" && configuration.isDevelopmentMode) {\n            configuration.hiddenInterceptDependencyListsModeDebug = true;\n        }\n    }\n}\nfunction reconnectDependencies(deps, fromIntercept) {\n    for(var _i = 0, _a = deps || []; _i < _a.length; _i++){\n        var i = _a[_i];\n        if (i === Object(i)) {\n            var state = i[self];\n            if (state) {\n                if (fromIntercept && configuration.hiddenInterceptDependencyListsModeDebug) {\n                    throw new StateInvalidUsageError(state.path, ErrorId.StateUsedInDependencyList);\n                }\n                state.reconnect();\n            }\n        }\n    }\n    return deps;\n}\nvar useEffectOrigin;\nfunction useHookstateEffect(effect, deps) {\n    reconnectDependencies(deps);\n    return useEffectOrigin(effect, deps);\n}\nfunction useEffectIntercept(effect, deps) {\n    reconnectDependencies(deps, true);\n    return useEffectOrigin(effect, deps);\n}\nvar useLayoutEffectOrigin;\nfunction useHookstateLayoutEffect(effect, deps) {\n    reconnectDependencies(deps);\n    return useLayoutEffectOrigin(effect, deps);\n}\nfunction useLayoutEffectIntercept(effect, deps) {\n    reconnectDependencies(deps, true);\n    return useLayoutEffectOrigin(effect, deps);\n}\nvar useInsertionEffectOrigin;\nfunction useHookstateInsertionEffect(effect, deps) {\n    reconnectDependencies(deps);\n    return useInsertionEffectOrigin(effect, deps);\n}\nfunction useInsertionEffectIntercept(effect, deps) {\n    reconnectDependencies(deps, true);\n    return useInsertionEffectOrigin(effect, deps);\n}\nvar useImperativeHandleOrigin;\nfunction useHookstateImperativeHandle(ref, init, deps) {\n    reconnectDependencies(deps);\n    return useImperativeHandleOrigin(ref, init, deps);\n}\nfunction useImperativeHandleIntercept(ref, init, deps) {\n    reconnectDependencies(deps, true);\n    return useImperativeHandleOrigin(ref, init, deps);\n}\nvar useMemoOrigin;\nfunction useHookstateMemo(factory, deps) {\n    reconnectDependencies(deps);\n    return useMemoOrigin(factory, deps);\n}\nfunction useMemoIntercept(factory, deps) {\n    reconnectDependencies(deps, true);\n    return useMemoOrigin(factory, deps);\n}\nvar useCallbackOrigin;\nfunction useHookstateCallback(callback, deps) {\n    reconnectDependencies(deps);\n    return useCallbackOrigin(callback, deps);\n}\nfunction useCallbackIntercept(callback, deps) {\n    reconnectDependencies(deps, true);\n    return useCallbackOrigin(callback, deps);\n}\nvar memoOrigin;\nfunction hookstateMemo(Component, propsAreEqual) {\n    return memoOrigin(Component, function(prevProps, nextProps) {\n        reconnectDependencies(Object.keys(nextProps).map(function(i) {\n            return nextProps[i];\n        }));\n        return (propsAreEqual || shallowEqual)(prevProps, nextProps);\n    });\n}\nfunction memoIntercept(Component, propsAreEqual) {\n    return memoOrigin(Component, function(prevProps, nextProps) {\n        reconnectDependencies(Object.keys(nextProps).map(function(i) {\n            return nextProps[i];\n        }), true);\n        return (propsAreEqual || shallowEqual)(prevProps, nextProps);\n    });\n}\nfunction interceptReactHooks() {\n    if (!useEffectOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect)) {\n        useEffectOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect) = useEffectIntercept;\n    }\n    if (!useLayoutEffectOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect)) {\n        useLayoutEffectOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect) = useLayoutEffectIntercept;\n    }\n    if (!useInsertionEffectOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect)) {\n        useInsertionEffectOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useInsertionEffect) = useInsertionEffectIntercept;\n    }\n    if (!useImperativeHandleOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle)) {\n        useImperativeHandleOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useImperativeHandle) = useImperativeHandleIntercept;\n    }\n    if (!useMemoOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo)) {\n        useMemoOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useMemo) = useMemoIntercept;\n    }\n    if (!useCallbackOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback)) {\n        useCallbackOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().useCallback) = useCallbackIntercept;\n    }\n    if (!memoOrigin && (react__WEBPACK_IMPORTED_MODULE_0___default().memo)) {\n        memoOrigin = (react__WEBPACK_IMPORTED_MODULE_0___default().memo);\n        (react__WEBPACK_IMPORTED_MODULE_0___default().memo) = memoIntercept;\n    }\n}\ninterceptReactHooks(); // TODO defer invoking it until state is created, so the configure had a chance to set it up first\n// Do not try to use useLayoutEffect if DOM not available (SSR)\nvar useIsomorphicLayoutEffect =  false ? 0 : useEffectOrigin;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@hookstate/core/dist/index.es.js\n");

/***/ })

};
;